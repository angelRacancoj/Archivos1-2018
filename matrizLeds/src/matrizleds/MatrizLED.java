/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matrizleds;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JButton;
import objects.pixelConfig;

/**
 *
 * @author angel
 */
public class MatrizLED extends javax.swing.JFrame {

    private int matrizSize;
    private LinkedList<Color> colorsList;
    private Color colorBase;
    private final int pixelSize = 30;
    private LinkedList<LinkedList<pixelConfig>> pixelList = new LinkedList<>();
    private LinkedList<Color> colorsNow = new LinkedList<>();

    /**
     * Creates new form MatrizLED
     *
     * @param matrizSize
     * @param colorsList
     * @param colorBase
     */
    public MatrizLED(int matrizSize, LinkedList<Color> colorsList, Color colorBase) {
        this.matrizSize = matrizSize;
        this.colorsList = colorsList;
        this.colorBase = colorBase;
        for (int i = 0; i < matrizSize; i++) {
            colorsNow.offer(colorBase);
        }
        initComponents();
        addPixels(matrizLEDPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matrizLEDPanel = new javax.swing.JPanel();
        iniciarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matriz LED");

        javax.swing.GroupLayout matrizLEDPanelLayout = new javax.swing.GroupLayout(matrizLEDPanel);
        matrizLEDPanel.setLayout(matrizLEDPanelLayout);
        matrizLEDPanelLayout.setHorizontalGroup(
            matrizLEDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );
        matrizLEDPanelLayout.setVerticalGroup(
            matrizLEDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        iniciarButton.setText("Iniciar");
        iniciarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(matrizLEDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(iniciarButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matrizLEDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(iniciarButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarButtonActionPerformed
        hilo miHilo = new hilo();
        miHilo.start();
    }//GEN-LAST:event_iniciarButtonActionPerformed

    private void addPixels(Container panel) {
        Dimension panelDimension = new Dimension(matrizSize * pixelSize, matrizSize * pixelSize);
        panel.setSize(panelDimension);
        panel.setPreferredSize(panelDimension);
        panel.setMinimumSize(panelDimension);

        Insets insets = panel.getInsets();
        for (int y = 0; y < matrizSize; y++) {
            LinkedList<pixelConfig> auxlist = new LinkedList<>();
            for (int x = 0; x < matrizSize; x++) {
                JButton auxButton = new JButton();
                auxButton.setBackground(colorBase);
                auxlist.add(new pixelConfig(x, y, auxButton));
                panel.add(auxButton);
                auxButton.setBounds(x * pixelSize + insets.left, y * pixelSize + insets.top, pixelSize, pixelSize);
            }
            pixelList.add(auxlist);
        }
        System.out.println("LEDs agregados");
    }

    private boolean areSameColor(LinkedList<Color> colorsToCkeck, Color colorToCkeck) {
        for (Color colorsToCkeck1 : colorsToCkeck) {
            if (colorsToCkeck1 != colorToCkeck) {
                return false;
            }
        }
        return true;
    }

    class hilo extends Thread {

        @Override
        public void run() {
            int i = 0;
            iniciarButton.setEnabled(false);
            do {
                if (i < colorsList.size()) {
                    colorsNow.offerFirst(colorsList.get(i));
                    colorsNow.pollLast();
                    setColorMatriz(colorsNow);
                } else {
                    colorsNow.offerFirst(colorBase);
                    colorsNow.pollLast();
                    setColorMatriz(colorsNow);
                }
                i++;
            } while (!areSameColor(colorsNow, colorBase));
            iniciarButton.setEnabled(true);
        }

        private void setColorMatriz(LinkedList<Color> colorsToSet) {
            for (int i = 0; i < matrizSize; i++) {
                setLineColor(pixelList.get(i), colorsToSet.get(i));
                matrizLEDPanel.repaint();
            }

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                System.out.println("Hilo interrumpido");
            }
        }

        private void setLineColor(LinkedList<pixelConfig> pixels, Color color) {
            for (pixelConfig pixel : pixels) {
                pixel.getBoton().setBackground(color);
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton iniciarButton;
    private javax.swing.JPanel matrizLEDPanel;
    // End of variables declaration//GEN-END:variables
}
